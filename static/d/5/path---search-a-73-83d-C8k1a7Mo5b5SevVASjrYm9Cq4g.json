{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\r\n## 데이타 형식\r\n[[geomap-matlab]]과 같이 [[point-cloud-meshlab-data]]에서 작성한 `xyzrgb`데이타를 로드하여 `xyz`를 사용한다.\r\n\r\n## 그래프 출력\r\n\r\n[[geomap-python]]과 같은 방식으로 들루네(Delaunay) 삼각 메쉬를 생성하고 [Duane Hanselman][1]가 작성한 `tricontour` 함수를 사용하여 컨투어를 그린다. 컨투어필은 할 수 없지만 컨투어 단계 수만 입력하므로 쉽게 컨투어를 생성한다.\r\n \r\n```matlab\r\n[C,h]=tricontour(tri,x,y,z,40);\r\n```\r\n\r\n## 출력물\r\n\r\n![tricontour-matlab](https://github.com/five2nine/geomap/blob/master/tricontour-matlab.png?raw=true)\r\n\r\n\r\n[1]:https://kr.mathworks.com/matlabcentral/fileexchange/38858-contour-plot-for-scattered-data?focused=5249779&tab=function\r\n\r\n","fields":{"slug":"/tricontour-matlab/"},"frontmatter":{"title":"matlab tricontour 함수를 사용하여 지형 그리기","published":true}}},{"node":{"rawMarkdownBody":"\r\n## 실행환경\r\n- `python` 명령행을 사용하면 별도의 그래프 창이 나타난다. 그래프가 동적으로 나타나지만 큰 데이타를 처리하지 못한다.\r\n- `jupyter` 웹인터페이스를 사용하면 인라인 그래프가 나타난다. 이 그래프는 정적인 그래프이다.\r\n```bash\r\npython point_cloud_python.py \r\n```\r\n\r\n## Annotation Centents\r\n데이타를 선택했을 때 보여줄 정보의 내용을 생성한다. 여기서는 3 좌표의 값이다.\r\n```python\r\ndef update_annot(ind):\r\n    pos = sc.get_offsets()[ind[\"ind\"][0]]\r\n    annot.xy = pos\r\n    text = \"{}\\n{}\\n{}\".format('Lon=%7.3f'%x[ind[\"ind\"][0]], \r\n                               'Lat=%7.3f'%y[ind[\"ind\"][0]],\r\n                               'Dep=%7.3f'%z[ind[\"ind\"][0]])\r\n    annot.set_text(text)\r\n    # annot.get_bbox_patch().set_facecolor(cmap(norm(c[ind[\"ind\"][0]])))\r\n    annot.get_bbox_patch().set_alpha(0.4)\r\n```\r\n\r\n## [Annotation Control][1]\r\n데이타를 선택했을 때 그래프가 반응하도록 동작을 정의한다.\r\n```python\r\ndef onactive(event):\r\n    vis = annot.get_visible()\r\n    if event.inaxes == ax:\r\n        cont, ind = sc.contains(event)\r\n        if cont:\r\n            update_annot(ind)\r\n            annot.set_visible(True)\r\n            fig.canvas.draw_idle()\r\n        else:\r\n            if vis:\r\n                annot.set_visible(False)\r\n                fig.canvas.draw_idle()\r\n```\r\n\r\n## Scatter 3D 모듈\r\n```python\r\nfrom mpl_toolkits.mplot3d import Axes3D\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport os\r\n```\r\n\r\n## Data 로딩\r\n텍스트 데이타를 쉽게 읽을 수 있다. 변수 3개를 한번에 할당하기 위해서 배열을 전치시켰다. 데이타 수가 너무 많을 경우에 건너 뛰며 읽었다.\r\n```python\r\nos.chdir(r\"C:\\my_work\\webapp\\create-react-app\\point-cloud-python\")\r\ndatafile=open(\"geomap.txt\",'r')\r\nxyz=np.loadtxt(datafile).transpose()\r\nx,y,z=xyz[0:3,::100]\r\n```\r\n\r\n## 3D 그림판\r\n그림판에 3차원 좌표축을 준비한다.\r\n```python\r\nfig = plt.figure()\r\nax = fig.add_subplot(111, projection='3d')\r\nax.set_xlabel('Longitude')\r\nax.set_ylabel('Latitude')\r\nax.set_zlabel('Depth')\r\n# ax.view_init(elev=90, azim=-90) # 평면\r\n```\r\n\r\n## Scatter 3D\r\n빨강-노랑-파랑 컬러맵을 사용하여 3차원 분포도를 그르고 컬러바를 추가한다.\r\n```python\r\ncm = plt.cm.get_cmap('RdYlBu')\r\nsc = ax.scatter(x, y, z, s=5, c=z, cmap=cm, marker='o', alpha=0.6)\r\n# sc = ax.scatter(x, y, z, s=5, c=z, cmap=cm, marker='o', alpha=0.6, edgecolor='none')\r\nplt.colorbar(sc)\r\n```\r\n\r\n## Annotation View\r\n데이타를 선택했을 때 보여줄 정보의 틀을 준비하고 초기값으로 보이지 않게 설정한다.\r\n```python\r\nannot = ax.annotate(\"\", xy=(0,0), xytext=(20,20),textcoords=\"offset points\",\r\n                    bbox=dict(boxstyle=\"round\", fc=\"w\"),\r\n                    arrowprops=dict(arrowstyle=\"->\"))\r\nannot.set_visible(False)\r\n```\r\n\r\n## Annotation Event\r\n데이타를 선택하는 이벤트를 결정한다.\r\n\r\n마우스| 클릭 | 호버링\r\n:------:|:-----------:|:-----------:\r\n이벤트 | button_press_event | motion_notify_event\r\n\r\n```python\r\nfig.canvas.mpl_connect('button_press_event', onactive)\r\n# fig.canvas.mpl_connect(\"motion_notify_event\", onactive)\r\n```\r\n\r\n## 그림판 보이기\r\n```python\r\nplt.show()\r\n```\r\n\r\n## 출력물\r\n![point-cloud-python](https://github.com/five2nine/geomap/blob/master/scatter-python.png?raw=true)\r\n\r\n\r\n\r\n[1]: https://stackoverflow.com/questions/10374930/matplotlib-annotating-a-3d-scatter-plot\r\n\r\n","fields":{"slug":"/scatter-python/"},"frontmatter":{"title":"python scatter 함수를 사용하여 지형 그리기","published":true}}},{"node":{"rawMarkdownBody":"\r\n## dlmwrite\r\nmatlab [dlmwrite][1] 함수는 ASCII로 파일에 구분자로 값이 구별되는 행렬을 일괄 저장한다.\r\n\r\n[1]:https://kr.mathworks.com/help/matlab/ref/dlmwrite.html\r\n\r\n\r\n","fields":{"slug":"/matlab-dlmwrite/"},"frontmatter":{"title":"matlab dlmwrite 함수로 행렬 쓰기","published":true}}},{"node":{"rawMarkdownBody":"\r\n## 데이타 형식\r\n\r\n[[point-cloud-meshlab-data]]에서 작성한 `xyzrgb`데이타를 로드하여 `xyz`를 사용한다.\r\n\r\n## 그래프 출력\r\n\r\n`scatter3d`를 사용하여 point cloud를 표현한다. 수심에 따른 색상 표현은 기본 기능을 사용한다. 컬러맵은 `jet`이며 `rainbow`를 나타한다.\r\n```matlab\r\nscatter3(x,y,z,12,z,'filled')\r\ncolormap(jet);\r\ncolorbar EastOutside\r\ndaspect([1 1 1])\r\n```\r\n\r\n다른 사람이 만든 colormap을 다운로드할 수 있다.\r\n\r\n- [Red Blue Colormap][1]\r\n- [bluewhitered][2]\r\n\r\n## 출력물\r\n\r\n![point-cloud-matlab](https://github.com/five2nine/geomap/blob/master/scatter-matlab.png?raw=true)\r\n\r\n\r\n[1]:https://kr.mathworks.com/matlabcentral/fileexchange/25536-red-blue-colormap\r\n[2]:https://kr.mathworks.com/matlabcentral/fileexchange/4058-bluewhitered\r\n\r\n\r\n\r\n","fields":{"slug":"/scatter-matlab/"},"frontmatter":{"title":"matlab scatter 함수를 사용하여 지형 그리기","published":true}}},{"node":{"rawMarkdownBody":"\r\n## ILnumeric 설치가 원인\r\n\r\nILnumeric WPF 라이브러리를 전날에 설치했었는데 여기에 포함된 `zip.lib`가 원인이되어 anconda가 작동하지 않았었다..\r\n\r\n\r\n## seaborn 설치가 원인\r\n\r\npython `conda` 매니저로 `seaborn` 패키지를 아래와 같이 설치하였다.\r\n```\r\n> run anaconda prompt\r\nconda install -c anaconda seaborn \r\n```\r\n\r\n이후 `anaconda`가 작동하지 않을 때 다음과 같은 시도를 하여 해결하였다.\r\n요약하면 설치된 모듈들을 패키지 매니저를 사용하여 최신의 세트로 변경하였다. 최종 메시지는 인스톨 완료이다.\r\n\r\n`상태확인`\r\n```\r\nconda info\r\nconda list --show-channel-urls\r\nanaconda-navigator\r\n```\r\n\r\n`업데이트`\r\n```\r\nconda update conda\r\nconda update anaconda-navigator\r\nconda update --all\r\n```\r\n","fields":{"slug":"/anaconda-not-working/"},"frontmatter":{"title":"Anaconda가 작동하지 않을 때","published":true}}},{"node":{"rawMarkdownBody":"\r\n## 데이타 형식\r\n\r\n[[scatter-meshlab-data]]에서 작성한 `xyzrgb`데이타를 로드하여 `xyz`를 사용한다.\r\n\r\n## 코드\r\n\r\n![scatter-labview-code](https://github.com/five2nine/geomap/blob/master/scatter-labview-code.png?raw=true)\r\n\r\n## 출력물\r\n\r\n![scatter-labview](https://github.com/five2nine/geomap/blob/master/scatter-labview.png?raw=true)\r\n\r\n\r\n","fields":{"slug":"/scatter-labview/"},"frontmatter":{"title":"labview 지형 그리기","published":true}}}]}},"pageContext":{}}